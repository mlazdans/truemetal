<?php declare(strict_types = 1);

# AUTOGENERATED - DO NOT MODIFY!

use dqdp\PropertyInitTrait;
use dqdp\DBA\Types\Varchar;
use dqdp\DBA\Types\Char;

trait LoginsTypeTrait {
	use PropertyInitTrait;

	readonly int $l_id;
	readonly ?string $l_hash;
	readonly string $l_login;
	readonly string $l_nick;
	readonly ?string $l_password;
	readonly ?string $l_email;
	readonly int $l_active;
	readonly int $l_accepted;
	readonly string $l_entered;
	readonly ?string $l_userip;
	readonly int $l_emailvisible;
	readonly ?string $l_sess_id;
	readonly ?string $l_sess_ip;
	readonly ?string $l_sessiondata;
	readonly ?string $l_lastaccess;
	readonly int $l_logedin;
	readonly string $l_forumsort_themes;
	readonly string $l_forumsort_msg;
	readonly int $l_disable_youtube;
	readonly ?int $votes_plus;
	readonly ?int $votes_minus;
	readonly ?int $comment_count;

	function __construct(array|object|null $data = null, array|object|null $defaults = null) {
		parent::__construct($data, $defaults);
		if(!prop_initialized($this, 'l_active'))$this->l_active = (int)1;
	}

	static function initl_hash(mixed $v): string {
		return (string)(new VarChar($v, 8));
	}

	static function initl_login(mixed $v): string {
		return (string)(new VarChar($v, 16));
	}

	static function initl_nick(mixed $v): string {
		return (string)(new VarChar($v, 16));
	}

	static function initl_password(mixed $v): string {
		return (string)(new VarChar($v, 64));
	}

	static function initl_email(mixed $v): string {
		return (string)(new VarChar($v, 128));
	}

	static function initl_userip(mixed $v): string {
		return (string)(new VarChar($v, 32));
	}

	static function initl_sess_id(mixed $v): string {
		return (string)(new VarChar($v, 32));
	}

	static function initl_sess_ip(mixed $v): string {
		return (string)(new VarChar($v, 32));
	}

	static function initl_forumsort_themes(mixed $v): string {
		return (string)(new Char($v, 1));
	}

	static function initl_forumsort_msg(mixed $v): string {
		return (string)(new Char($v, 1));
	}

	function save(): mixed {
		return (new LoginsEntity)->save($this);
	}

	function insert(): mixed {
		return (new LoginsEntity)->insert($this);
	}

	function delete(): bool {
		return (new LoginsEntity)->delete($this->l_id);
	}

	function update(): bool {
		return (new LoginsEntity)->update($this->l_id, $this);
	}
}
